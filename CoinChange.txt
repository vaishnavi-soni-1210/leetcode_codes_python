You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104

------------------------------------------------------------------

Approach:
1. don't be greedy, we can't always start from biggest present coin.eg: [1,3,4,5], 
amt = 7, so using 5 won't will a right solution, we need to use 3,4

2. Use DFS tree, on each step there are 4 possibilities i.e. 1,3,4,5. so, use DFS is different way, 
at each step check what is the remaining amount & subtract used from from it.

3. Better will be to use bottom up technique rather than top to bottom with dfs decision tree
store each result, i.e. no. of coins to get to a particular amount starting from 0 to N(say 7) in array
DP[0]=0
DP[1]=1
DP[2]=2
DP[3]=1
DP[4]=1
DP[5]=1
DP[6]=2

FOR DP[7], check by using 1st coin to be either 1,3,4 or 5
DP[7] = 1 + DP[6] = 1 + 2 = 3(if used 1)
DP[7] = 3 + DP[4] = 1 + 1 = 2(if used 1)
DP[7] = 4 + DP[3] = 1 + 1 = 2(if used 1)
DP[7] = 5 + DP[2] = 1 + 2 = 3(if used 1)

therefore, out of above 4, lowest = ans = 2
#time complexity: O(amount * len(coins)) bcz using 2 for loop each of amount & len(coins) respectively
#space complexity: O(amount) bcz using array of size amount
