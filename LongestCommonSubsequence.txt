Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.

Approach: 2D dynamic programming bottom up approach (brute force approach):
(brute force meaning divide into subproblems & solve each subproblem to reach to the main problem)

-draw a 2d grid, assign one string to each x,y quadrants.
-take one row & one column extra for storing out of bounds i.e. 0s
-out of bounds will be 0 in this case, because any string comparision with '' is 0
-here, if a character matches +1 & add to it the diagonal value
-if a character doesn't match find the max(right,bottom) i.e. longest possible substring next

time complexity = O(m*n)
space complexity = O(m*n) because calculating each each cell 
