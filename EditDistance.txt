Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 
Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

SIMILAR TO LongestCommonSubsequence.py
----------------------------------------------

Corner cases:
1. if word1, word2 = "", then no. of operations req = 0
2. if word1, word2 = "abc", then also, no. of operations req = 0
3. if word1="abc", word2 = "", then no of operations req = len(word1), and all delete operations
4. if word1="", word2 = "abc", then no of operations req = len(word2), and all insert operations

Approach: Brute force -> recursion -> call dfs() recursively for every subproblem
- consider all corner cases
- i is index in word1 & j is index in word2, compare word1, word2 char by char
if(word1[i] == word2[j]): operations = 0 & i++,j++
else: (either of the three operations), operations+1 and
insert  ->  (i,j+1)
delete  ->  (i+1,j)
replace -> (i+1,j+1)

Right Approach: ALWAYS DRAW A 2D GRID to solve this kind of problem, and in grid, apply BOTTOM UP DP.

add one extra row & column for base cases i.e. 0 and & no. of characters equal to len(word) in the cells
- go from bottom to up i.e. from grid[m][n] : "","", operations = 0, to grid[0][0], operations = x

Eg: word1 = "abd", word2 = "acd"

in 2d grid:
    a  c  d   0
a             3              
b             2
d             1
0   3  2  1   0

- for each cell, if word1[i] == word2[j], then i++,j++, i.e. look for diagonally next subproblem
- else, either insert or delete or replace, & ADD 1 + consider the MIN of these 3 bcz we need to find shortest
i.e. 1+ either go right(insert) or bottom(delete) or diagonal(replace) subproblem

#time complexity = O(m*n) (m is length of word1 & n is length of word 2)
#space complexity = O(m*n) (m is length of word1 & n is length of word 2)
