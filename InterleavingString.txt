Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m non-empty substrings respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

NOTE: Above explaination is NONSENSE

Explaination: Given strings s1,s2,s3.. can we take any set of substring from string s1 & s2 to form s3?
eg: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
s1 = {'aa', 'bc', c}
s2 = {'db','bca'}
Ans: true

Example 1:
Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"

Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 
Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
 

Follow up: Could you solve it using only O(s2.length) additional memory space?

Approach1: Brute force dfs
Explaination: Given strings s1,s2,s3.. can we take any set of substring from string s1 & s2 to form s3?
eg: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
s1 = {'aa', 'bc', c}
s2 = {'db','bca'}
Ans: true

- we can't take random characters from strings s1,s2.. order should be maintained
-So, for s3 = 'aadbbcbcac', compare s1 & s2 & check for 1st character i.e. 'a' in s3
& for each character in s3, continue the comparion & proceed in s1 & s2 strings ahead
-two decisions will come in picture when we need a 'b' & there is 'b','b' in both s1 & s2
time complexity = 2^(n+m) i.e. considering 2 decisions at every step & n+m = total characters

Approach2: Using 2D array (bottom up technique)
-form a 2D array having each string s1,s2 on each axis.. 
-one extra row & column for out of bounds..
-for each cell we need to calculate result for 2 characters i.e. 1 from each string 
& check if it can form the 2 characters in target string s3
(begining from end, if last 2 characters i.e. last of s1,s2 form last 2 characters of s3)
storing T for true in cell if it can be used or F for false if not.
- using this, time complexity = O(n*m)

#time complexity = O(n*m)
#space complexity = O(n*m)