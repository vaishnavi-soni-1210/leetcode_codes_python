You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.
 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 105

-----------------------------------------------------------------

Approach 1: Brute force decision tree-
-from each index there are number of possibilities equal to assigned value
-if there is 0 at any position means dead end & we can't jump anywhere from that position
-use an array DP, which will save the result of subproblem at index i of nums
-save the result as true or false any any index
-time complexity = O(n^2)
-space complexity = O(n)

Approach 2: Greedy solution- better Approach - time complexity = O(n)
-start from the end/last index of nums & try to reach to the 0th position
-for each index i, check if the previous position has such a value by which we can reach to index i
-set goal to nums[last] & decrease to nums[last-1], nums[last-2], nums[last-3] & so on till nums[0]
-here we are shifting the GOAL to the left i.e near to our destination everytime
-we dont need any cache[DP array] here, we only need a variable to store latest goal
-time complexity = O(n)
-space complexity = O(1)