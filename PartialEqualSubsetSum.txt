Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 
Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

Approach: 
- first of all what is the sum of all elements in nums eg: 22, half of it = 11
so, check if sum of elements can be 11 or a number in nums = 11 & OBVIOUSLY, 
the remaining ones in nums also sum to 11
- if sum of elements is odd say 11, then anyway can't be divided in equal halfs

Approach 1 - DECISION TREE, DFS - eg: [1,5,11,5]
- at every step we have 2 choices, whether to add the number to the sum or not & 
final will be to reach target 11, if exceeds, don;t continue that path
-eg: at step 1: take 1 or 0, step 2: take 5 or 0, step 3: take 11 or 0, - reached to 11 i.e target
- once the target is reached, we can confirm that partition is possible, so return true
- TIME COMPLEXITY: 2^n (here, 2^4)

Approach 2 - Dynamic programming: backtracking approach:
-target will change everytime as the remaining value from target after sum 
& the ans will depend on next subproblem

- use a set = {} to store the results from backtracking approach
- say nums = [1,5,11,5], start from last i.e. i=3
-store all the possible solutions(sum) possible from i=3 in set i.e. set = {0,5} 
=> we can either take or not take 5
-same way for all the next indexes in reverse,
=>set = {0,5,11,16,10,21,1,6,12,17,22 } #using set in order to avoid repeatation
- if this set contains 11, we'll return true else false

- TIME COMPLEXITY: O(n*SUM(nums)) 
reason is target = sum(nums)/2, and we need to loop through n till we reach target
- SPACE COMPLEXITY: O(SUM(nums)) bcz set size depends on target value


