Category: Dynamic Programming

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
-----------------------------------------------------------------------

Approach:

Brute Force (Recursive) Approach
The approach is to consider all possible combination steps i.e. 1 and 2, at every step. 
To reach the Nth stair, one can jump from either (N – 1)th or from (N – 2)th stair. 
Hence, for each step, total ways would be the summation of (N – 1)th stair + (N – 2)th stair.

The recursive function would be:

ClimbStairs(N) = ClimbStairs(N – 1) + ClimbStairs(N – 2).

there is one thing to notice, the value of ways(N) is equal to fibonacci(N+1). 
i.e. (n+1)th stair = fibonacci(n-1) + fibonacci(n-2)

If we observe carefully, the expression is nothing but the Fibonacci Sequence.

solution is present here: https://www.geeksforgeeks.org/count-ways-reach-nth-stair/

best solution explained: https://www.youtube.com/watch?v=Y0lT9Fck7qI - SUCCESSFULL one

=> + there are many other leetcode solutions also available on this youtube channel

#time complexity = O(n) bcz each result(n times) depends on previous subproblem, 
#space complexity = O(1), because we r only using 2-3 variables