Given an m x n binary matrix filled with 0's and 1's, 
find the largest square containing only 1's and return its area.

Eg: 1: Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4

Eg: 2: Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0

Approaches: 
1> Recursion + cache - storing repeated sub problems - top bottom - USED IN PROGRAM
2> Dynamic programming - Cache/Memorization - storing repeated sub problems - bottom up - using loop

eg: 1   0   1   1
    1   1   0   1
    1   1   1   1

Cache -> will store the max side of square we can get at position, considering it the top left corner
and ofcorse reusing results from the cache wherever required
-> if there is a 1 in the cell, the minimum we can get is a 1*1 square
-> if there is a 0 in the cell, we wont get a square so its 0
-> start from bottom right & go backtracking to top left

cache:  1   0   1   1
        2   1   0   1
        1   1   1   1

max length of square is 2 so its area is 4 = answer

time complexity = space complexity = O(m*n)