Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., "ACE" is a subsequence of "ABCDE" while "AEC" is not).

The test cases are generated so that the answer fits on a 32-bit signed integer.

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
 
Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.

Corner cases: 
- if s="a", and t="", in this case ans = 1 i.e not taking any character from s matches t
- if s="", and t="", in this case ans = 1 i.e not taking any character from s matches t
- if s="", and t="a", in this case ans = 0 i.e nothing from s matches t EXACTLY

Approach: Caching - use hashmap to store each result & reuse result instead of calculation again
Consider eg: s="rabbbit", t="rabbit"
here,we need to find max distinct subsequences of s that EXACTLY matches t, i.e all chars from t are must

set index i for s & j for t
for each i,j 
1. compare s[i] == t[j]
if matches move on i+1,j+1, else increment only i i.e. i=i+1,j=j
2. Another condition, if s[i] == t[j], what if we exclude s[i] & remaining string can also match,
so, again increment i=i+1,j=j

time & space complexity = O(n*m) [say len(s)=n & len(t)=m]