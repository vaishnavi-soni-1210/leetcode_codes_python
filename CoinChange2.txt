You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

Example 1:

Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
Example 3:

Input: amount = 10, coins = [10]
Output: 1

----------------------------------------------------------

Approach: (check CoinChange problem solved earlier)
-Here, we'll use a 2d grid/matrix to solve
-Memoization technique: store each result to avoid repeatation eg: coin at index 0 should not be used 
while looking for combinations for coin at index 1, because that decision tree is already solved
-Draw 2d array with amount going in reverse in x axis & coins array in y axis(each row will be a coin)
-Start from bottom to up i.e. from last coin & 0 amount, for 0 amount all cells will be 1 (base case)
-go from right to left & from bottom row to top.. at last cache{0, amount} will be the ans i.e no. of ways
- for each cell, SUM of (right hand side coin times, bottom 1 cell)

#time complexity: O(amount * len(coins)) bcz using loop for each of amount & len(coins) respectively
#space complexity: O(amount * len(coins)) bcz caching all cells

-> here using advanced DP solution, we can reduce the time complexity to O(len(coins)) i.e array size