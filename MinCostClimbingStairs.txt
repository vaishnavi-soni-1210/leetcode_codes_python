You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

 

Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.
 

Constraints:

2 <= cost.length <= 1000
0 <= cost[i] <= 999

approach: first check with depth first search(2^n) & then remove unnecessary subproblem calculations(O(n)),
then with a bottom to up dynamic programming approach, i.e. bottom to up of DFS tree, 
use an array or variables to store the result of last 2 subproblems to add to get the current

note: 
1. here, we can start from 0th index or 1st, so in final result, compare variables one & two, 
or compare 0th & 1st array elements and whichever is minimum, is the result
here there is no fibonacci series like another example (leetcode 70)
2. mainly, here the last step is not the nth element in array say [10,15,20] n = 3 is not the last step,
bcz from last element there is cost associated i.e 20, so from last 20 units is the cost to reach 
to the top, i.e. consider stairs like [10,15,20] 0 (where 0 is the destination)
3. remember, we can start either from step 0 or 1 i.e. index 0/1

#time complexity = O(n), space complexity = O(1)