Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

Example 1:
9   9   4
6   6   8
2   1   1

Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
--------------------------------------------------------------------

Example 2:
3   4   5
3   2   6
2   2   1

Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

Example 3:

Input: matrix = [[1]]
Output: 1
 
Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1

Corner cases: 
1 if matrix is of size 1*1
2 consider out of bounds
3 at every step consider max(left,right,up,down)

Approach 1 : DFS - Brute force Approach
- consider each cell, find longest possible INCREASING path from it & store
- for every cell default longest possible path is 1
- if longest possible path at any cell is already calculated and it comes in calculation, reuse stored val
eg: if at cell x, longest increasing path of its left cell is already calculated, then ans = 1+DFS(left(x))
- atlast max of all cells i.e. matrix is the ans
- TIME COMPLEXITY = O(m*n), also SPACE COMPLEXITY = O(m*n)

Approach 2: Store previous result & compare the new result with it
- Caching - Use hash map {} to add each record i.e dp[(row,column)] = length of longest increasing path

#time complexity = space complexity = O(m*n)
