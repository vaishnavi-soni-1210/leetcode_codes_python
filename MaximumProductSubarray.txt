Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 
Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

Approach1: Brute force solution
eg: arr = [2,3,-2,4]
for each value in arr, get products with continues numbers & comparethe largest, i.e.
2,2*2, 2*3*-2, 2*3*-2*4
3,3*-2, 3*-2*4
-2,-2*4
4
& return whatever is the largest

but here time complexity = O(n^2), bcz n times all the products with n i.e. nested loop i.e. n*n

Approach2: Patterns
-all positives [1,2,3,4] - product will always increase
-all negatives [-1,-2,-3,-4] - at alternate positions products will be positive or negative, 
and if we take 2 adjust -ves, then also the product will be positive,
so for every position, we need to keep the track of max & min result posible at that position
eg: at position 1 of arr, there is value -2.. here min could be -2 and max could be -1*-2 = 2
eg: at position 2 of arr, there is value -3.. here min could be -1*-2*-3 = -6 & max could be -2*-3 = 6

edge case: if there is a 0 in the middle & we include it in product, it will ruin & make 0
so, when there is a 0, set max = 1, min = 1

time complexity = O(n) as we are iterating n times
space complexity = O(1) as we are using only 2 variables to store values
