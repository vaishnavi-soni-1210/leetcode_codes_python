You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Example 1:

Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]
Example 2:

Input: prices = [1]
Output: 0
 
Constraints:

1 <= prices.length <= 5000
0 <= prices[i] <= 1000

Approach 1: Dynamic programming: DFS tree:
1. By DFS decision tree: starting from 0 to the last day, we always have two choices at every step
either we can buy/sell or we can cooldown.
2. One special condition is that after a sell, we compulsarily have only one option i.e. cooldown
3. After every buy, we can't buy again & after every sell, we can't sell again (1 transaction at a time)
4. At every step for calculating total profit/price, - for buy & + for sell
5. time complexity with tree will be 2^n, where n is no. of days

Approach 2: Dynamic programming : DFS tree but with CACHING technique
1. In this technique, we store the profit at every position i in array of size next
2. We'll store in dictionary DP[key,value]: DP[i, bool] (bool = decision either buy or sell, say buy = T)
-> here i will go n times, i.e for each day & 2 values possible for each day (bool)
-> time complexity = O(2*n) i.e. O(n)

