You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, 
which means you have to modify the input 2D matrix directly. 
DO NOT allocate another 2D matrix and do the rotation.

Example 1:

1   2   3             7   4   1
4   5   6     ->      8   5   2
7   8   9             9   6   3

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 
5   1   9   11          15  13  2   5
2   4   8   10          14  3   4   1
13  3   6   7           12  6   8   9
15  14  12  16          16  7   10  11

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

Appproach: Dynamic programming 
in eg1: for rotating 90 degrees, move 1->3,3->9,9->7,7->1, next move 2->6,6->8,8->4,4->2 & so on
remember, 5 will remain as it is
-> for each row/column, no of rotations will be n-1, because last cell is already rotated

in eg2: first rotate the outer boundry i.e. outermost square, then do the same for inner(smaller) square
so, inner square is our SUBPROBLEM
-> DP approach where each inner square is a subproblem
-> to shift to a subproblem, simply increase the left,right pointers by 1
-> base case: LEFT < RIGHT, so when left>=right, break the loop
->we can use a temporary variable to store the replaced value everytime, if we go clockwise,so many temp variables required
->or we can use 1 temp variable to store 1st value(here 5), and rotate other values anticlockwise i.e. in
reverse order, move 15->5,16->15,11->16, at last 5 from temp to 11

time complexity = O(n*n) = O(n^2)
space complecity = O(1)
