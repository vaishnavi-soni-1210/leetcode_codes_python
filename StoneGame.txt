Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.

Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.

Example 1:

Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alice starts first, and can only take the first 5 or the last 5.
Say she takes the first 5, so that the row becomes [3, 4, 5].
If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.
If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.
This demonstrated that taking the first 5 was a winning move for Alice, so we return true.
Example 2:

Input: piles = [3,7,2,3]
Output: true
 
Constraints:

2 <= piles.length <= 500
piles.length is even.
1 <= piles[i] <= 500
sum(piles[i]) is odd.

------------------------------------------------------------------

Approach - 
- ans is always true i.e. Alice always wins in this problem (the one who plays first)
- we need to play from Alice's perspective & check the best optimal combination from the piles for Alice
- one player can choose pile either from the start or the end, but being GREEDY cant always help 
bcz next in the row could be a much more greater number
- eg: piles = [5,1,100,6] -> from 2 possible combinations (5+100),(1+6), greater one is suppose to be chosen
- that means Alice is GUARANTEED to be abe to pick with all the EVEN indexes or all the ODD indexes from piles.
- so based on max(sum(all even index values),sum(all odd index values)), alice can choose her move.
- as total number of values in piles is EVEN, so [0 1 2 3 4.... n], n(last index) is always odd
if she chooses even indexes then has to pick 0 first
and if she chooses odd indexes then has to pick n first

*DFS brute force - there are always 2 choices, thus decision tree height = 2^n -

- to draw decision tree, at every node, we'll calculate Alice's total, 
and decision of both alice and bob (indexes they could choose) simultaneously
- time complexity = 2^n

*Caching - more optimized than decision tree, we'll eliminate repeated work by storing result of every subproblem
in every step we have a left index L and a right index R
there are n possible values for L & n possible values for R, so O(n*n)
- time complexity = O(n^2)


- time complexity = O(1)

FOLLOW UP QUESTION / EDGE CASE:
- what if the the sum of all values is even and not odd?
-> then there is a chance of tie too. Alice may or may not win
- what is Bob's total? 
-> Total of array - Alice's total



