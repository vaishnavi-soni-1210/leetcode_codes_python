Video solution: https://www.youtube.com/watch?v=ZI2z5pq0TqA

Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it can trap after raining.

Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 
Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

Approach:
- for each position on x-axis, determine min(left boundary, right boundary) = units of water trapped
- in position i, water trapped = min(L,R) - height[i] 
(if this goes out of bounds i.e. -ve, then no wapper trapped at ith position)

Approach1:

- create an array to store max-left for each index i in array
- create another array to store max-right for each index i in array
- create 3rd array to store min(max-left,max-right) for each index i in array 
- at last, use formula min(L,R) - height[i], calculate from 0 to len(array)-1 & add them to get result
-if min(L,R) - height[i] goes -ve, then consider 0 units
time complexity = O(n)
space complexity = O(n)

Approach2: 

- take 2 variables maxLeft & maxRight, set them to 0th & last position
- in every case we anyway need to consider the MINIMUM of (left & right), 
- so for every index i, we can calculate the minimum of left and right, with one of the actual MAX values
- unit of water = L-height if we are considering maxLeft for shifting
- unit of water = R-height if we are considering maxRight for shifting
- and for each index i, apply formula min(L,R) - height[i], & keep adding till the end
- increment L & decrement R pointers according to whichever is smaller
- do the total by adding units of water for every index
time complexity = O(n)
space complexity = O(1)
